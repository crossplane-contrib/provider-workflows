name: Publish Non-Family Provider

on:
  workflow_call:
    inputs:
      repository:
        description: "Source repository (like provider-azuread, provider-kubernetes..)"
        required: true
        type: string
      version:
        description: "Version string to use while publishing the packages"
        default: ''
        required: false
        type: string
      go-version:
        description: 'Go version to use if building needs to be done'
        default: '1.22'
        required: false
        type: string
      cleanup-disk:
        description: "If set to true, an initial step will be run to reclaim some extra disk space for the build/test jobs in this workflow"
        required: false
        type: boolean
        default: false
      runs-on:
        default: ubuntu-latest
        required: false
        type: string
      mirror:
        description: "If set to true, the xpkg will be mirrored to xpkg.upbound.io"
        required: false
        type: boolean
        default: true
      mirror-registry:
        description: "Additional registry host to mirror images to."
        required: false
        type: string
        default: "xpkg.upbound.io"
      registry_org:
        description: "The organization to publish to in the targeted registries."
        required: false
        type: string
        default: "crossplane-contrib"
    secrets:
      GHCR_PAT:
        required: true
      # Additional credentials are required if inputs.mirror is set, defaulting to the common target of xpkg.upbound.io.
      # To support an arbitrary number of additional registries, the job inputs should be refactored to accept a single string input in JSON format that can be parsed in a job step.
      # This approach works around GitHub Actions' 10-input limit: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions
      XPKG_UPBOUND_TOKEN:
        required: false
      XPKG_UPBOUND_ACCESS_ID:
        required: false

env:
  # Common versions
  DOCKER_BUILDX_VERSION: 'v0.20.1'
  UP_VERSION: 'v0.39.0'

  # Registry/Org names, defaulting to `crossplane-contrib`
  CROSSPLANE_REGORG: 'ghcr.io/${{ inputs.registry_org }}'
  MIRROR_REGORG: '${{ inputs.mirror-registry }}/${{ inputs.registry_org }}'

jobs:
  publish-artifacts:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Cleanup Disk
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
        if: ${{ inputs.cleanup-disk }}
        with:
          android: true
          dotnet: true
          haskell: true
          tool-cache: true
          large-packages: false
          swap-storage: false

      - name: Setup QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Login to GHCR using PAT
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Checkout
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
        with:
          go-version: ${{ inputs.go-version }}

      - name: Find the Go Build Cache
        id: go_cache
        run: |
          echo "cache=$(make go.cachedir)" >> $GITHUB_OUTPUT && \
          echo "mod_cache=$(make go.mod.cachedir)" >> $GITHUB_OUTPUT

      - name: Cache the Go Build Cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4
        with:
          path: ${{ steps.go_cache.outputs.cache }}
          key: ${{ runner.os }}-build-publish-artifacts-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-publish-artifacts-

      - name: Cache Go Dependencies
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4
        with:
          path: ${{ steps.go_cache.outputs.mod_cache }}
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Build Artifacts
        id: build_artifacts
        run: |
          make -j XPKG_REG_ORGS="${{ env.CROSSPLANE_REGORG }}" XPKG_REG_ORGS_NO_PROMOTE="${{ env.CROSSPLANE_REGORG }}" BRANCH_NAME="main" ${{ inputs.version != '' && format('VERSION={0}', inputs.version) || '' }} build.all
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"

      - name: Publish Artifacts
        run: |
          make -j XPKG_REG_ORGS="${{ env.CROSSPLANE_REGORG }}" XPKG_REG_ORGS_NO_PROMOTE="${{ env.CROSSPLANE_REGORG }}" BRANCH_NAME="main" ${{ inputs.version != '' && format('VERSION={0}', inputs.version) || '' }} publish

  check-prerequisites:
    needs: publish-artifacts
    runs-on: ${{ inputs.runs-on }}
    outputs:
      should_mirror: ${{ steps.set.outputs.should_mirror }}
    steps:
      - id: set
        run: |
          should_mirror=false
          if [[ -n "${{ secrets.XPKG_UPBOUND_ACCESS_ID }}" && -n "${{ secrets.XPKG_UPBOUND_TOKEN }}" && -n "${{ inputs.mirror }}" ]]; then
            should_mirror=true
          fi
          echo "should_mirror=${should_mirror}" >> $GITHUB_OUTPUT

  mirror-to-additional-registry:
    needs: check-prerequisites
    runs-on: ${{ inputs.runs-on }}
    if: ${{ needs.check-prerequisites.outputs.should_mirror == 'true' }}
    steps:
      - name: Setup crane
        # crane will inherit credentials from `docker login`
        uses: imjasonh/setup-crane@v0.4

      - name: Validate crane installation
        run: crane version

      - name: Login to Mirror Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ inputs.mirror-registry }}
          username: ${{ secrets.XPKG_UPBOUND_ACCESS_ID }}
          password: ${{ secrets.XPKG_UPBOUND_TOKEN }}

      - name: Mirror to ${{ inputs.mirror-registry }}
        run: |
          crane copy ${{ env.CROSSPLANE_REGORG }}/${{ inputs.repository }}:${{ inputs.version }} ${{ env.MIRROR_REGORG }}/${{ inputs.repository }}:${{ inputs.version }} --allow-nondistributable-artifacts
