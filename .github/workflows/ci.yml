name: CI

on:
  workflow_call:
    inputs:
      runs-on:
        default: ubuntu-latest
        required: false
        type: string
      go-version:
        description: 'Go version to use'
        default: '1.23'
        required: false
        type: string
      golangci-version:
        description: 'GolangCI version to use'
        default: 'v1.61.0'
        required: false
        type: string
      docker-buildx-version:
        description: 'GolangCI version to use'
        default: 'v0.17.1'
        required: false
        type: string
      aws-default-region:
        description: 'AWS region to use for uploading packages to S3'
        default: 'us-east-1'
        required: false
    secrets:
      aws-access-key-id:
        description: 'AWS Access Key ID for uploading build package to S3'
        required: false
      aws-access-key-secret:
        description: 'AWS Access Key secret for uploading build package to S3'
        required: false


env:
  GO_VERSION: ${{ inputs.go-version }}
  GOLANGCI_VERSION: ${{ inputs.golangci-version }}
  DOCKER_BUILDX_VERSION: ${{ inputs.docker-buildx-version }}
  AWS_DEFAULT_REGION: ${{ inputs.aws-default-region }}

  # Common users. We can't run a step 'if secrets.XXX != ""' but we can run a
  # step 'if env.XXX' != ""', so we copy these to succinctly test whether
  # credentials have been provided before trying to run steps that need them.
  AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-access-key-secret }}

jobs:
  detect-noop:
    runs-on: ubuntu-latest
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@f75f66ce1886f00957d99748a42c724f4330bdcf # v5.3.1
        with:
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'

  lint:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      # We could run 'make lint' but we prefer this action because it leaves
      # 'annotations' (i.e. it comments on PRs to point out linter violations).
      - name: Lint
        uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6.1.1
        with:
          version: ${{ env.GOLANGCI_VERSION }}

  check-diff:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install goimports
        run: |
          cd /tmp
          go install golang.org/x/tools/cmd/goimports@v0.1.12

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Check Diff
        id: check-diff
        run: |
          make check-diff

      - name: Show diff
        if: failure() && steps.check-diff.outcome == 'failure'
        run: git diff

  unit-tests:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Run Unit Tests
        run: make -j2 test

  publish-artifacts:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Cleanup Disk
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
        with:
          android: true
          dotnet: true
          haskell: true
          tool-cache: true
          large-packages: false
          swap-storage: false

      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Build Artifacts
        run: make -j2 build.all
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"

      - name: Publish Artifacts to GitHub
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: output
          path: _output/**
          include-hidden-files: true

      - name: Publish Artifacts to S3
        run: make -j2 publish BRANCH_NAME=${GITHUB_REF##*/}
        if: env.AWS_ACCESS_KEY_ID != ''
        env:
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}

      - name: Promote Artifacts in S3
        if: github.ref == 'refs/heads/main' && env.AWS_ACCESS_KEY_ID != ''
        run: make -j2 promote
        env:
          BRANCH_NAME: main
          CHANNEL: main
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
